#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("whm-server:server");
const http = require("http");
const mongoose = require("mongoose");
const {
  removeSocket,
  updateSocket,
  setSocket,
  getSockets,
  getSocketWithUser,
} = require("./socket");
const Chat = require("../models/Chat");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require("socket.io")(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});
io.on("connection", (socket) => {
  console.log("A user connected");

  // Listen for incoming messages
  socket.on("message", (message) => {
    switch (message.type) {
      case "start":
        setSocket({ socket, user: null });
        break;
      case "login":
        updateSocket(socket, { socket, user: message.user });
        (async () => {
          try {
            const chats = await Chat.find({
              $or: [
                { "from._id": message.user._id },
                { "to._id": message.user._id },
              ],
            });
            socket.emit("chat", chats);
          } catch (error) {}
        })();
        break;
      case "logout":
        updateSocket(socket, { socket, user: null });
        break;
      case "chat":
        const chat = new Chat(message.data);
        chat.save();
        getSocketWithUser(message.data.to)?.socket.emit(
          "new-chat",
          message.data
        );
        break;
      default:
        break;
    }
  });

  // Handle disconnections
  socket.on("disconnect", () => {
    removeSocket(socket);
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */
mongoose
  .connect(
    process.env.MONGO_DB_URL ||
      "mongodb+srv://chaolongpiao:chaolong1995@cluster0.inglvcw.mongodb.net/whm-db",
    {
      useUnifiedTopology: true,
      useNewUrlParser: true,
    }
  )
  .then(() => {
    console.log("Connected to MongoDB");
    // Start the server
    server.listen(port, () => {
      console.log("Server started on port " + port);
    });
  })
  .catch((error) => {
    console.error("Error connecting to MongoDB:", error.message);
  });

const db = mongoose.connection;
db.on("connected", () => {
  console.log("Connected to the database");
});

db.on("error", (error) => {
  console.error("Error connecting to the database:", error);
});

server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
